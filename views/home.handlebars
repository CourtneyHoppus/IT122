<!DOCTYPE html>
<html>
  <body class="home">
    <div id="root"></div>
    <script type="text/babel">

      const cats = {{{ cats }}}

      const Cats = (props) => {
        const listCats = props.cats.map((cat) =>
          <li key={ cat._id }>
            <div className="col s12 m6 center">
              <div className="card blue-grey lighten-3">
                <div className="card-content black-text center" >
                  <span className="card-title">
                    Learn more about
                  </span>
                </div>
                <div className="card-action">
                  <div className="btn-large white-text blue-grey lighten-1" onClick={ props.clickHandler }>
                    { cat.name }
                  </div>
                </div>
              </div>
            </div>
          </li>
          );
        return <ul>{ listCats }</ul>;
      }

      const CatDetail = (props) => {
        return (
          <div className="col s12 m6 center">
            <div className="card blue-grey lighten-3">
              <div className="card-content black-text center" >
                <span className="card-title">
                  Details of Selected Cat: { props.cat.name }
                </span>
                <ul className="left-align">
                  <li>Name: { props.cat.name }</li>
                  <li>Number: { props.cat.number }</li>
                  <li>Fat? { JSON.stringify(props.cat.fat) }</li>
                  <li>Colors: { JSON.stringify(props.cat.colors) }</li>
                </ul>
              </div>
            </div>
          </div>
        );
      }

      const CatForm = (props) => {
        return (
          <div className="col s12 m6 center">
            <div className="card blue-grey lighten-3">
              <div className="card-content black-text center" >
                <span className="card-title">
                  Details of Selected Cat: 
                </span>
                <form className="center">
                  <div className="row">
                    <label className='black-text' htmlFor='name'>
                      Name: 
                    </label>
                    <div className='input-field inline'>
                      <input value={ props.cat.name } className='input-field inline center' type="text" id="name" />
                    </div>
                  </div>
                  <div className="row">
                    <label className='black-text' htmlFor='number'>
                      Number: 
                    </label>
                    <div className='input-field inline'>
                      <input value={ props.cat.number } className='input-field inline center' type="text" id="number" />
                    </div>
                  </div>
                  <div className="row">
                    <label className='black-text' htmlFor='fat'>
                      Fat? 
                    </label>
                    <div className='input-field inline'>
                      <input value={ props.cat.fat } className='input-field inline center' type="text" id="fat" />
                    </div>
                  </div>
                  <div className="row">
                    <label className='black-text' htmlFor='colors'>
                      Colors: 
                    </label>
                    <div className='input-field inline'>
                      <input onChange={ props.handleChange } value={ props.cat.colors } className='input-field inline center' type="text" id="colors" />
                    </div>
                  </div>
                </form>
              </div>
            </div>
          </div>
        );
      }

      class CatApp extends React.Component {
        constructor(props) {
          super(props);
          this.state = {
            items: {{{ cats }}},
            currentItem: {}
          };
          this.selectItem = this.selectItem.bind(this);
          this.handleChange = this.handleChange.bind(this);
        }

        // event handler
        selectItem = (event) => {
          const found = this.state.items.find((item) => {
            return item.name === event.target.innerHTML;
          });
          this.setState({ currentItem: found });
        }

        handleChange = (event) => {
          console.log('state.currentItem', this.state.currentItem)
          let newItem = this.state.currentItem
          console.log('newItem', newItem)
          newItem[event.target.id] = event.target.value;
          this.setState({ currentItem: newItem });
          console.log('target', event.target)
          console.log('target.id', event.target.id)
          console.log('target.value', event.target.value)
        }

        render() {
          return (
            <>
            <div className="row">
              <Cats cats={ this.state.items } clickHandler={ this.selectItem } />
            </div>
            <CatForm cat={ this.state.currentItem } handleChange={ this.handleChange } />
            </>
          );
        }
      }

      ReactDOM.render(
        <CatApp />, document.getElementById('root')
      );

    </script>
  </body>
</html>
